From: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
Date: Tue, 2 Jan 2024 10:23:29 +0100
Subject: Undocumented changes

Last-Update: 2011-01-21

This patch contains undocumented changes accumulated during previous
versions of the Ubuntu plymouth package, that have not yet been split up
into individually-documented patches.  Please try not to add further things
to this patch.  Using quilt for new changes is recommended, but if you
don't, they'll end up in a separate debian-changes patch at the end of the
patch series.
---
 src/client/ply-boot-client.c                  | 30 +++++++++++++-----
 src/libply-splash-core/ply-pixel-display.c    | 10 ++++++
 src/libply-splash-core/ply-pixel-display.h    |  2 ++
 src/libply-splash-core/ply-renderer-plugin.h  |  3 +-
 src/libply-splash-core/ply-renderer.c         | 15 +++++++++
 src/libply-splash-core/ply-renderer.h         |  2 ++
 src/main.c                                    | 34 +++++++++++++++++---
 src/plugins/renderers/frame-buffer/plugin.c   | 11 +++++++
 src/plugins/splash/script/script-lib-image.c  |  2 +-
 src/plugins/splash/script/script-lib-sprite.c | 45 +++++++++++++++++++++++++++
 src/plugins/splash/text/plugin.c              |  4 ++-
 11 files changed, 143 insertions(+), 15 deletions(-)

--- a/src/client/ply-boot-client.c
+++ b/src/client/ply-boot-client.c
@@ -261,14 +261,30 @@ ply_boot_client_process_incoming_replies
                 return;
         }
 
-        request_node = ply_list_get_first_node (client->requests_waiting_for_replies);
-        assert (request_node != NULL);
+        if (!ply_read (client->socket_fd, byte, sizeof(uint8_t))) {
+                ply_error ("could not read response from boot status daemon");
+                return;
+        }
 
-        request = (ply_boot_client_request_t *) ply_list_node_get_data (request_node);
-        assert (request != NULL);
+        for (request_node = ply_list_get_first_node (client->requests_waiting_for_replies);
+             ; request_node = ply_list_get_next_node (client->requests_waiting_for_replies, request_node)) {
+                assert (request_node != NULL);
+                request = (ply_boot_client_request_t *) ply_list_node_get_data (request_node);
+                assert (request != NULL);
 
-        if (!ply_read (client->socket_fd, byte, sizeof(uint8_t)))
-                goto out;
+                if (! strcmp (request->command, PLY_BOOT_PROTOCOL_REQUEST_TYPE_PASSWORD)
+                    || ! strcmp (request->command, PLY_BOOT_PROTOCOL_REQUEST_TYPE_CACHED_PASSWORD)
+                    || ! strcmp (request->command, PLY_BOOT_PROTOCOL_REQUEST_TYPE_QUESTION)
+                    || ! strcmp (request->command, PLY_BOOT_PROTOCOL_REQUEST_TYPE_KEYSTROKE)) {
+                        if (! memcmp (byte, PLY_BOOT_PROTOCOL_RESPONSE_TYPE_ANSWER, sizeof (uint8_t))
+                            || ! memcmp (byte, PLY_BOOT_PROTOCOL_RESPONSE_TYPE_NO_ANSWER, sizeof (uint8_t)))
+                                break;
+                } else {
+                        if (memcmp (byte, PLY_BOOT_PROTOCOL_RESPONSE_TYPE_ANSWER, sizeof (uint8_t))
+                            && memcmp (byte, PLY_BOOT_PROTOCOL_RESPONSE_TYPE_NO_ANSWER, sizeof (uint8_t)))
+                                break;
+                }
+        }
 
         if (memcmp (byte, PLY_BOOT_PROTOCOL_RESPONSE_TYPE_ACK, sizeof(uint8_t)) == 0) {
                 if (request->handler != NULL)
--- a/src/libply-splash-core/ply-pixel-display.c
+++ b/src/libply-splash-core/ply-pixel-display.c
@@ -51,6 +51,7 @@ struct _ply_pixel_display
         unsigned long                    width;
         unsigned long                    height;
         int                              device_scale;
+        unsigned int                     bits_per_pixel;
 
         ply_pixel_display_draw_handler_t draw_handler;
         void                            *draw_handler_user_data;
@@ -79,6 +80,9 @@ ply_pixel_display_new (ply_renderer_t
         display->height = size.height;
         display->device_scale = ply_pixel_buffer_get_device_scale (pixel_buffer);
 
+        display->bits_per_pixel = ply_renderer_get_bits_per_pixel_for_head (renderer,
+                                                                            head);
+
         return display;
 }
 
@@ -112,6 +116,12 @@ ply_pixel_display_get_device_scale (ply_
         return display->device_scale;
 }
 
+unsigned int
+ply_pixel_display_get_bits_per_pixel (ply_pixel_display_t *display)
+{
+  return display->bits_per_pixel;
+}
+
 static void
 ply_pixel_display_flush (ply_pixel_display_t *display)
 {
--- a/src/libply-splash-core/ply-pixel-display.h
+++ b/src/libply-splash-core/ply-pixel-display.h
@@ -49,6 +49,8 @@ void ply_pixel_display_free (ply_pixel_d
 ply_renderer_t *ply_pixel_display_get_renderer (ply_pixel_display_t *display);
 ply_renderer_head_t *ply_pixel_display_get_renderer_head (ply_pixel_display_t *display);
 
+unsigned int ply_pixel_display_get_bits_per_pixel (ply_pixel_display_t *display);
+
 unsigned long ply_pixel_display_get_width (ply_pixel_display_t *display);
 unsigned long ply_pixel_display_get_height (ply_pixel_display_t *display);
 int ply_pixel_display_get_device_scale (ply_pixel_display_t *display);
--- a/src/libply-splash-core/ply-renderer-plugin.h
+++ b/src/libply-splash-core/ply-renderer-plugin.h
@@ -56,7 +56,8 @@ typedef struct
 
         ply_pixel_buffer_t * (*get_buffer_for_head)(ply_renderer_backend_t *backend,
                                                     ply_renderer_head_t    *head);
-
+        unsigned int (*get_bits_per_pixel_for_head)(ply_renderer_backend_t * backend,
+                                                    ply_renderer_head_t * head);
         ply_renderer_input_source_t * (*get_input_source)(ply_renderer_backend_t *backend);
         bool (*open_input_source)(ply_renderer_backend_t      *backend,
                                   ply_renderer_input_source_t *input_source);
--- a/src/libply-splash-core/ply-renderer.c
+++ b/src/libply-splash-core/ply-renderer.c
@@ -353,6 +353,21 @@ ply_renderer_get_buffer_for_head (ply_re
                                                                 head);
 }
 
+unsigned int
+ply_renderer_get_bits_per_pixel_for_head (ply_renderer_t      *renderer,
+                                          ply_renderer_head_t *head)
+{
+  assert (renderer != NULL);
+  assert (renderer->plugin_interface != NULL);
+  assert (head != NULL);
+
+  if (!renderer->plugin_interface->get_bits_per_pixel_for_head)
+    return 0;
+
+  return renderer->plugin_interface->get_bits_per_pixel_for_head (renderer->backend,
+                                                                  head);
+}
+
 void
 ply_renderer_flush_head (ply_renderer_t      *renderer,
                          ply_renderer_head_t *head)
--- a/src/libply-splash-core/ply-renderer.h
+++ b/src/libply-splash-core/ply-renderer.h
@@ -65,6 +65,8 @@ const char *ply_renderer_get_device_name
 ply_list_t *ply_renderer_get_heads (ply_renderer_t *renderer);
 ply_pixel_buffer_t *ply_renderer_get_buffer_for_head (ply_renderer_t      *renderer,
                                                       ply_renderer_head_t *head);
+unsigned int ply_renderer_get_bits_per_pixel_for_head (ply_renderer_t      *renderer,
+                                                       ply_renderer_head_t *head);
 
 void ply_renderer_flush_head (ply_renderer_t      *renderer,
                               ply_renderer_head_t *head);
--- a/src/main.c
+++ b/src/main.c
@@ -121,6 +121,7 @@ typedef struct
         const char             *default_tty;
 
         int                     number_of_errors;
+        ply_list_t             *pending_messages;
 } state_t;
 
 static void show_splash (state_t *state);
@@ -190,8 +191,9 @@ on_update (state_t    *state,
            const char *status)
 {
         ply_trace ("updating status to '%s'", status);
-        ply_progress_status_update (state->progress,
-                                    status);
+        if (strncmp (status, "fsck:", 5))
+                ply_progress_status_update (state->progress,
+                                            status);
         if (state->boot_splash != NULL)
                 ply_boot_splash_update_status (state->boot_splash,
                                                status);
@@ -251,6 +253,25 @@ on_system_update (state_t *state,
 }
 
 static void
+flush_pending_messages (state_t *state)
+{
+  ply_list_node_t *node = ply_list_get_first_node (state->pending_messages);
+  while (node != NULL)
+    {
+      ply_list_node_t *next_node;
+      char *message = ply_list_node_get_data (node);
+
+      ply_trace ("displaying queued message");
+
+      ply_boot_splash_display_message (state->boot_splash, message);
+      next_node = ply_list_get_next_node (state->pending_messages, node);
+      ply_list_remove_node (state->pending_messages, node);
+      free(message);
+      node = next_node;
+    }
+}
+
+static void
 show_messages (state_t *state)
 {
         if (state->boot_splash == NULL) {
@@ -479,7 +500,7 @@ show_default_splash (state_t *state)
         if (state->boot_splash == NULL) {
                 ply_trace ("Could not start default splash screen,"
                            "showing text splash screen");
-                state->boot_splash = show_theme (state, PLYMOUTH_THEME_PATH "text/text.plymouth");
+                state->boot_splash = show_theme (state, PLYMOUTH_THEME_PATH "text.plymouth");
         }
 
         if (state->boot_splash == NULL) {
@@ -489,7 +510,8 @@ show_default_splash (state_t *state)
         }
 
         if (state->boot_splash == NULL) {
-                ply_error ("plymouthd: could not start boot splash: %m");
+                if (errno != ENOENT)
+                        ply_error ("plymouthd: could not start boot splash: %m");
                 return;
         }
 
@@ -576,8 +598,8 @@ on_display_message (state_t    *state,
                 ply_boot_splash_display_message (state->boot_splash, message);
         } else {
                 ply_trace ("not displaying message %s as no splash", message);
+                ply_list_append_data (state->messages, strdup (message));
         }
-        ply_list_append_data (state->messages, strdup (message));
 }
 
 static void
@@ -823,6 +845,7 @@ prepare_logging (state_t *state)
                 if (state->number_of_errors > 0)
                         spool_error (state);
         }
+        flush_pending_messages (state);
 }
 
 static void
@@ -2116,6 +2139,7 @@ initialize_environment (state_t *state)
         state->keystroke_triggers = ply_list_new ();
         state->entry_triggers = ply_list_new ();
         state->entry_buffer = ply_buffer_new ();
+        state->pending_messages = ply_list_new ();
         state->messages = ply_list_new ();
 
         if (!ply_is_tracing_to_terminal ())
--- a/src/plugins/renderers/frame-buffer/plugin.c
+++ b/src/plugins/renderers/frame-buffer/plugin.c
@@ -647,6 +647,16 @@ get_buffer_for_head (ply_renderer_backen
         return backend->head.pixel_buffer;
 }
 
+static unsigned int
+get_bits_per_pixel_for_head (ply_renderer_backend_t *backend,
+                             ply_renderer_head_t    *head)
+{
+  if (head != &backend->head)
+    return 0;
+
+  return backend->bytes_per_pixel * 8;
+}
+
 static bool
 has_input_source (ply_renderer_backend_t      *backend,
                   ply_renderer_input_source_t *input_source)
@@ -928,6 +938,7 @@ ply_renderer_backend_get_interface (void
                 .flush_head                   = flush_head,
                 .get_heads                    = get_heads,
                 .get_buffer_for_head          = get_buffer_for_head,
+                .get_bits_per_pixel_for_head  = get_bits_per_pixel_for_head,
                 .get_input_source             = get_input_source,
                 .open_input_source            = open_input_source,
                 .set_handler_for_input_source = set_handler_for_input_source,
--- a/src/plugins/splash/script/script-lib-image.c
+++ b/src/plugins/splash/script/script-lib-image.c
@@ -200,7 +200,7 @@ static script_return_t image_text (scrip
 
         alpha_obj = script_obj_hash_peek_element (state->local, "alpha");
 
-        if (script_obj_is_number (alpha_obj))
+        if (alpha_obj && script_obj_is_number (alpha_obj))
                 alpha = CLAMP (script_obj_as_number (alpha_obj), 0, 1);
         else
                 alpha = 1;
--- a/src/plugins/splash/script/script-lib-sprite.c
+++ b/src/plugins/splash/script/script-lib-sprite.c
@@ -366,6 +366,45 @@ static script_return_t sprite_window_set
         return script_return_obj_null ();
 }
 
+static script_return_t sprite_window_get_bits_per_pixel (script_state_t *state,
+                                                         void           *user_data)
+{
+  script_lib_sprite_data_t *data = user_data;
+  ply_list_node_t *node;
+  int index;
+  script_obj_t *index_obj;
+  script_lib_display_t *display;
+  unsigned int bits_per_pixel;
+
+  index_obj = script_obj_hash_peek_element (state->local, "window");
+
+  if (index_obj)
+    {
+      index = script_obj_as_number (index_obj);
+      script_obj_unref(index_obj);
+      if (index < 0)
+        return script_return_obj_null ();
+      node = ply_list_get_nth_node (data->displays, index);
+      if (node == NULL)
+        return script_return_obj_null ();
+      display = ply_list_node_get_data (node);
+      bits_per_pixel = ply_pixel_display_get_bits_per_pixel (display->pixel_display);
+      return script_return_obj (script_obj_new_number (bits_per_pixel));
+    }
+
+  bits_per_pixel = 0;
+  for (node = ply_list_get_first_node (data->displays);
+       node;
+       node = ply_list_get_next_node (data->displays, node))
+    {
+      display = ply_list_node_get_data (node);
+      bits_per_pixel = ply_pixel_display_get_bits_per_pixel (display->pixel_display);
+      if (bits_per_pixel)
+        break;
+    }
+  return script_return_obj (script_obj_new_number (bits_per_pixel));
+}
+
 static uint32_t extract_rgb_color (script_state_t *state)
 {
         uint8_t red = CLAMP (255 * script_obj_hash_get_number (state->local, "red"), 0, 255);
@@ -667,6 +706,12 @@ script_lib_sprite_data_t *script_lib_spr
                                     "value",
                                     NULL);
         script_add_native_function (window_hash,
+                                    "GetBitsPerPixel",
+                                    sprite_window_get_bits_per_pixel,
+                                    data,
+                                    "window",
+                                    NULL);
+        script_add_native_function (window_hash,
                                     "SetBackgroundTopColor",
                                     sprite_window_set_background_top_color,
                                     data,
--- a/src/plugins/splash/text/plugin.c
+++ b/src/plugins/splash/text/plugin.c
@@ -463,8 +463,10 @@ add_text_display (ply_boot_splash_plugin
         view = view_new (plugin, display);
 
         terminal = ply_text_display_get_terminal (view->display);
-        if (ply_terminal_open (terminal))
+        if (ply_terminal_open (terminal)) {
+                ply_terminal_set_mode (terminal, PLY_TERMINAL_MODE_TEXT);
                 ply_terminal_activate_vt (terminal);
+        }
 
         ply_text_display_set_draw_handler (view->display,
                                            (ply_text_display_draw_handler_t)
